name: CI/CD Pipeline - Advanced Task 160724

on:
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Install mail, mailx, mutt, mpack, and sendmail
        run: |
          sudo apt-get update
          sudo apt-get install -y mailutils
          sudo apt-get install -y mpack
          sudo apt-get install -y mutt

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'  # Replace with your Python version

      - name: Install dependencies
        run: |
          python -m pip install flake8 pytest pytest-cov

      - name: Lint code
        run: |
          flake8 --count --select=E901,E999,F821,F822,F823 --show-source --statistics CICD_Tests/160724/test_script.py
          flake8 CICD_Tests/160724/test_script.py

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'  # Replace with your Python version

      - name: Run tests
        run: |
          python CICD_Tests/160724/test_script.py

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml  # Adjust based on your coverage report file

  notify:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Send notification email using sendmail
        env:
          TO_EMAIL: evgenyb@egged.co.il  # Replace with recipient's email
          FROM_EMAIL: zalupatest@gmail.com  # Replace with sender's email
        continue-on-error: true
        run: |
          echo "Subject: CI/CD Pipeline Notification" > email.txt
          echo "From: $FROM_EMAIL" >> email.txt
          echo "To: $TO_EMAIL" >> email.txt
          echo "" >> email.txt  # Empty line to separate headers from body
          echo "Your pull request build passed successfully." >> email.txt
          echo "" >> email.txt  # Empty line for proper formatting
          echo "Best regards," >> email.txt
          echo "Your CI/CD Pipeline" >> email.txt
          
          # Using sendmail to send the email
          sendmail -t < email.txt || echo "sendmail failed with exit code: $?" >&2

      - name: Send notification email using mailx
        env:
          TO_EMAIL: evgenyb@egged.co.il  # Replace with recipient's email
          FROM_EMAIL: zalupatest@gmail.com  # Replace with sender's email
        continue-on-error: true
        run: |
          echo "Your pull request build passed successfully." | mailx -s "CI/CD Pipeline Notification" -r $FROM_EMAIL $TO_EMAIL || echo "mailx failed with exit code: $?" >&2

      - name: Send notification email using mutt
        env:
          TO_EMAIL: evgenyb@egged.co.il  # Replace with recipient's email
          FROM_EMAIL: zalupatest@gmail.com  # Replace with sender's email
        continue-on-error: true
        run: |
          echo "Your pull request build passed successfully." | mutt -s "CI/CD Pipeline Notification" -- $TO_EMAIL --from $FROM_EMAIL || echo "mutt failed with exit code: $?" >&2

      - name: Send notification email using mpack
        env:
          TO_EMAIL: evgenyb@egged.co.il  # Replace with recipient's email
          FROM_EMAIL: zalupatest@gmail.com  # Replace with sender's email
        continue-on-error: true
        run: |
          echo "Your pull request build passed successfully." | mpack -s "CI/CD Pipeline Notification" -d $TO_EMAIL -r $FROM_EMAIL || echo "mpack failed with exit code: $?" >&2

  final-check:
    runs-on: ubuntu-latest
    needs: notify
    steps:
      - name: Check if all email attempts failed
        run: |
          if [ -f "$(find . -name error.log)" ]; then
            cat error.log
            exit 1
          fi
